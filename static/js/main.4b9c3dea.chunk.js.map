{"version":3,"sources":["redux/actions.js","components/Form/Form.js","components/ContactItem/ContactItem.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","payload","name","number","id","Date","deleteContact","changeFilter","Form","formInitialState","state","inputHandler","target","value","setState","submitForm","e","preventDefault","contact","now","props","this","onSubmit","type","onChange","pattern","title","required","onClick","Component","connect","dispatch","actions","ContactItem","getVisibleContacts","allContacts","filter","toLowerCase","includes","contacts","map","index","contactIndex","handleInputChange","onAddContact","onDeleteContact","length","contactsReducer","createReducer","filterReducer","_","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAEaA,EAAaC,YAAa,iBAAiB,kBAAuB,CACvEC,QAAS,CACLC,KAF4C,EAAGA,KAG/CC,OAH4C,EAASA,OAIrDC,GAAI,IAAIC,UAKPC,EAAgBN,YAAa,oBAC7BO,EAAeP,YAAa,0BAE1B,GAACD,aAAYO,gBAAeC,gB,OCVrCC,E,4MACFC,iBAAmB,CACfP,KAAM,GACNC,OAAQ,I,EAGZO,M,eACO,EAAKD,kB,EAGZE,aAAe,YAAe,IAAbC,EAAY,EAAZA,OACNC,EAAeD,EAAfC,MAAOX,EAAQU,EAARV,KACd,EAAKY,SAAL,eACKZ,EAAOW,K,EAIhBE,WAAa,SAACC,GACV,MAAuB,EAAKN,MAArBR,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OACba,EAAEC,iBACF,IAAMC,EAAU,CACZhB,OACAC,SACAC,GAAIC,KAAKc,OAGb,EAAKC,MAAMrB,WAAWmB,GACtB,EAAKJ,SAAL,eAAkB,EAAKL,oB,4CAG3B,WACI,MAAuBY,KAAKX,MAArBR,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OACb,OACQ,uBACImB,SAAUD,KAAKN,WADnB,UAGI,kCACI,wCACA,uBACIQ,KAAK,OACLrB,KAAK,OACLW,MAAOX,EACPsB,SAAUH,KAAKV,aACfc,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGhB,kCACI,0CACA,uBACIJ,KAAK,MACLrB,KAAK,SACLW,MAAOV,EACPqB,SAAUH,KAAKV,aACfc,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGhB,wBAAQC,QAASP,KAAKN,WAAYQ,KAAK,SAAvC,gC,GA5DDM,aAsEJC,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACpChC,WAAY,SAACG,EAAMC,GAAP,OAAkB4B,EAASC,EAAQjC,WAAWG,EAAMC,QAGrD2B,CAAkCtB,GCvDlCyB,EAjBK,SAAC,GAAuC,IAAtC7B,EAAqC,EAArCA,GAAIF,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,OAAQG,EAAmB,EAAnBA,cAMpC,OACI,qCACI,+BAAOJ,IADX,MAC0B,+BAAOC,IAC7B,wBACIyB,QARO,WACftB,EAAcF,IAQNmB,KAAK,SAFT,wBCaNW,EAAqB,SAACC,EAAaC,GACrC,OAAOD,EAAYC,QAAO,SAAAlB,GAAO,OAC7BA,EAAQhB,KAAKmC,cAAcC,SAASF,EAAOC,mBAYpCP,eARS,SAAC,GAAD,IAAES,EAAF,EAAEA,SAAUH,EAAZ,EAAYA,OAAZ,MAAyB,CAC7CG,SAAUL,EAAmBK,EAAUH,OAGhB,SAAAL,GAAQ,MAAK,CACpCzB,cAAe,SAAAF,GAAE,OAAI2B,EAASC,EAAQ1B,cAAcF,QAGzC0B,EAjCM,SAAC,GAA+B,IAA9BS,EAA6B,EAA7BA,SAAUjC,EAAmB,EAAnBA,cAC7B,OACI,qCACI,0CACA,6BACKiC,EAASC,KAAI,SAACtB,EAASuB,GAAV,OACV,6BACI,cAAC,EAAD,2BACQvB,GADR,IAEIZ,cAAeA,EACfoC,aAAcD,MAJbvB,EAAQd,eCgBtB0B,eARS,SAAApB,GAAK,MAAK,CAC9B0B,OAAQ1B,EAAM0B,WAGS,SAAAL,GAAQ,MAAK,CACpCY,kBAAmB,SAAA3B,GAAC,OAAIe,EAASC,EAAQzB,aAAaS,EAAEJ,OAAOC,YAGpDiB,EAvBA,SAAC,GAAiC,IAAhCM,EAA+B,EAA/BA,OAAQO,EAAuB,EAAvBA,kBACrB,OACI,qCACI,sDACA,uBACIpB,KAAK,OACLV,MAAOuB,EAEPZ,SAAUmB,UC2BXb,eAbS,SAACpB,GACrB,MAAO,CACH6B,SAAU7B,EAAM6B,aAIG,SAAAR,GACvB,MAAO,CACHa,aAAc,kBAAMb,EAASC,MAC7Ba,gBAAiB,kBAAMd,EAASC,SAIzBF,EA/BH,SAAC,GAA+C,IAA9CS,EAA6C,EAA7CA,SAAUK,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,gBAClC,OACI,qCACI,2CACA,cAAC,EAAD,CAAM9C,WAAY6C,IACjBL,EAASO,OAAS,GACnB,cAAC,EAAD,IAECP,EAASO,OAAS,GACnB,cAAC,EAAD,CACIP,SAAUA,EACVjC,cAAeuC,U,OChBlBE,EAAkBC,YAAc,IAAD,mBACvChB,EAAQjC,YAAa,SAACW,EAAD,OAAST,EAAT,EAASA,QAAT,4BAA0BS,GAA1B,CAAiCT,OADf,cAEvC+B,EAAQ1B,eAAgB,SAACI,EAAD,OAAST,EAAT,EAASA,QAAT,OAAsBS,EAAM0B,QAAO,SAAAlB,GAAO,OAAIA,EAAQd,KAAOH,QAF9C,IAK/BgD,EAAgBD,YAAc,GAAD,eACrChB,EAAQzB,cAAe,SAAC2C,EAAD,YAAKjD,Y,iBCL3BkD,EAAU,sBAAOC,eAAP,CAA+BC,MAUhCC,EARDC,YAAe,CACzBC,QAAS,CACLjB,SAAUQ,EACVX,OAAQa,GAEZE,eCJJM,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRM,SAASC,eAAe,W","file":"static/js/main.4b9c3dea.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction(\"phonebook/Add\", ({ name, number }) => ({\n        payload: {\n            name,\n            number,\n            id: new Date(),\n        }\n    })\n);\n\nexport const deleteContact = createAction(\"phonebook/Delete\");\nexport const changeFilter = createAction(\"phonebook/changeFilter\");\n\nexport default {addContact, deleteContact, changeFilter};\n\n// export const changeFilter = filter => ({\n//     type: \"phonebook/changeFilter\",\n//     payload: filter,\n// });\n\n// export const deleteContact = id => ({\n//     type: \"phonebook/Delete\",\n//     payload: id\n// });\n\n// export const addContact = ({name, number,}) => ({\n//     type: \"phonebook/Add\",\n//     payload: {\n//         name: name,\n//         number: number,\n//         id: new Date(),\n//     }\n// });\n","import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../redux/actions\";\n\nclass Form extends Component {\n    formInitialState = {\n        name: \"\",\n        number: \"\",\n    };\n\n    state = {\n        ...this.formInitialState,\n    }\n\n    inputHandler = ({target}) => {\n        const {value, name} = target;\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    submitForm = (e) => {\n        const {name, number} = this.state;\n        e.preventDefault();\n        const contact = {\n            name,\n            number,\n            id: Date.now(),\n        };\n\n        this.props.addContact(contact);\n        this.setState({...this.formInitialState});\n    }\n\n    render() {\n        const {name, number} = this.state;\n        return (\n                <form\n                    onSubmit={this.submitForm}\n                >\n                    <label>\n                        <span>Name</span>\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            value={name}\n                            onChange={this.inputHandler}\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                            required\n                        />\n                    </label>\n                    <label>\n                        <span>Number</span>\n                        <input\n                            type=\"tel\"\n                            name=\"number\"\n                            value={number}\n                            onChange={this.inputHandler}\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                            required\n                        />\n                    </label>\n                    <button onClick={this.submitForm} type=\"button\">Add contact</button>\n                </form>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    addContact: (name, number) => dispatch(actions.addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(Form);\n","import React from \"react\";\n\nconst ContactItem = ({id, name, number, deleteContact}) => {\n\n    const removeItem = () => {\n        deleteContact(id);\n    };\n\n    return (\n        <>\n            <span>{name}</span> : <span>{number}</span>\n            <button\n                onClick={removeItem}\n                type=\"button\">delete\n            </button>\n        </>\n    )\n};\n\nexport default ContactItem;\n","import React from \"react\";\nimport ContactItem from \"../ContactItem/ContactItem\";\nimport {connect} from \"react-redux\";\nimport actions from \"../../redux/actions\";\n\nconst ContactsList = ({contacts, deleteContact}) => {\n    return (\n        <>\n            <h2>Contacts</h2>\n            <ul>\n                {contacts.map((contact, index) => (\n                    <li key={contact.id}>\n                        <ContactItem\n                            {...contact}\n                            deleteContact={deleteContact}\n                            contactIndex={index}\n                        />\n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n    return allContacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n};\n\nconst mapStateToProps = ({contacts, filter}) => ({\n    contacts: getVisibleContacts(contacts, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    deleteContact: id => dispatch(actions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n\n// const mapStateToProps = state => {\n//     const {contacts, filter} = state;\n//     const visibleContacts = getVisibleContacts(contacts, filter);\n//     return {\n//     contacts: visibleContacts,\n//     }\n// };\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport actions from \"../../redux/actions\";\n\nconst Filter = ({filter, handleInputChange}) => {\n    return (\n        <>\n            <p>Find contacts by name</p>\n            <input\n                type=\"text\"\n                value={filter}\n                //при использовании, событие обрабатывается в mapDispatchToProps\n                onChange={handleInputChange}\n                // onChange={e => handleInputChange(e.target.value)}\n            />\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    filter: state.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    handleInputChange: e => dispatch(actions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import './App.css';\nimport React from \"react\";\nimport Form from \"./components/Form/Form\";\nimport ContactsList from \"./components/ContactsList/ContactsList\";\nimport Filter from \"./components/Filter/Filter\";\nimport {connect} from \"react-redux\";\nimport * as actions from \"./redux/actions\";\n\nconst App = ({contacts, onAddContact, onDeleteContact}) => {\n    return (\n        <>\n            <h2>Phonebook</h2>\n            <Form addContact={onAddContact}/>\n            {contacts.length > 1 &&\n            <Filter/>\n            }\n            {contacts.length > 0 &&\n            <ContactsList\n                contacts={contacts}\n                deleteContact={onDeleteContact}\n            />\n            }\n        </>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        contacts: state.contacts,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddContact: () => dispatch(actions.addContact()),\n        onDeleteContact: () => dispatch(actions.deleteContact()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n// state = {\n//   contacts: [],\n//   name: \"\",\n//   number: \"\",\n//   filter: \"\",\n// }\n\n// addContact = ({name, number}) => {\n//   const contact = {\n//     name,\n//     number,\n//     id: Date.now(),\n//   };\n//   if (this.state.contacts.find(contact => contact.name === name)) {\n//     return alert(`${name} is already in contacts`);\n//   }\n//\n//   this.setState(prev => ({\n//     contacts: [...prev.contacts, contact],\n//   }));\n// };\n\n// deleteContact = (id) => {\n//   this.setState(prev => ({\n//     contacts: prev.contacts.filter(contact => contact.id !== id),\n//   }));\n// };\n\n// //метод для обновления фильтра\n// handleInputChange = (filter) => {\n//   this.setState({filter});\n// };\n\n// getVisibleContacts = () => {\n//   const {contacts, filter} = this.state;\n//   return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\n//   );\n// };\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"./actions\";\n\nexport const contactsReducer = createReducer([], {\n    [actions.addContact]: (state, {payload}) => [...state, payload],\n    [actions.deleteContact]: (state, {payload}) => state.filter(contact => contact.id !== payload),\n});\n\nexport const filterReducer = createReducer(\"\", {\n    [actions.changeFilter]: (_, {payload}) => payload,\n});\n\nexport default {contactsReducer, filterReducer};\n\n// export const contactsReducer = (state = [], {type, payload}) => {\n//     switch (type) {\n//         case \"phonebook/Add\" :\n//             return [...state, payload];\n//         case \"phonebook/Delete\" :\n//             return state.filter(contact => contact.id !== payload);\n//         default:\n//             return state;\n//     }\n// };\n\n// export const filterReducer = (state = \"\", {type, payload}) => {\n//     switch (type) {\n//         case \"phonebook/changeFilter\" :\n//             return payload;\n//         default:\n//             return state;\n//     }\n// };\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {filterReducer, contactsReducer} from \"./reducer\";\nimport logger from 'redux-logger';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n    reducer: {\n        contacts: contactsReducer,\n        filter: filterReducer,\n    },\n    middleware,\n})\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}